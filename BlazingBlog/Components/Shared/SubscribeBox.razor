@using BlazingBlog.Services.SubscribersService
@using Microsoft.AspNetCore.Antiforgery
@inject ISubscriberService SubscriberService
@attribute [StreamRendering(true)]


<div class="container pt-4 pb-4">
    <div class="border p-5 bg-lightblue">
        <div class="row justify-content-between">
            <div class="col-md-6">
                <h5 class="font-weight-bold secondfont">Become a member</h5>
                Get the latest news right in your inbox. It's free and you can unsubscribe at any time. We hate spam as much as we do, so we never spam!
            </div>
            <div class="col-md-6">
                <EditForm Model="Model" method="post" OnValidSubmit="Subscribe" FormName="subscribeForm" Enhance>
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-6">
                            <InputText @bind-Value="Model.Name"
                                       type="text" class="form-control" placeholder="Name">
                            </InputText>
                            <ValidationMessage For="() => Model.Name" class="text-danger" />
                        </div>
                        <div class="col-md-6">
                            <InputText @bind-Value="Model.Email"
                                       type="email" class="form-control" placeholder="Email">
                            </InputText>
                            <ValidationMessage For="() => Model.Email" class="text-danger" />
                        </div>
                        @if (!string.IsNullOrWhiteSpace(_message))
                        {
                            <div class="col-md-12">
                                <p class="m-0 p-0 text-indigo">
                                    @_message
                                </p>
                            </div>
                        }
                        <div class="col-md-12 mt-3">
                            <button type="submit" class="btn btn-success btn-block">
                                Subscribe
                            </button>
                        </div>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Subscriber Model { get; set; } = new();
    private string _message = string.Empty;


    private async Task Subscribe()
    {
        _message = "Subscribing...";
        await Task.Delay(TimeSpan.FromSeconds(2.5));
        var _errorMessage = await SubscriberService.Subscribe(Model);
        if (string.IsNullOrWhiteSpace(_errorMessage))
        {
            _message = "Thank you for subscribing.";
        }
        else
            _message = _errorMessage;
    }
}
