@page "/admin/manage-blog-posts"

@inject IBlogPostAdminService BlogPostService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false))


<AdminHeader Title="Manage Blog Posts">
    <ActionButtons>
        <a href="admin/manage-blog-posts/new"
           class="btn btn-sm btn-primary"
           data-enhance-nav="false">
            Add New Blog Post
        </a>
    </ActionButtons>
</AdminHeader>


@if (_isLoading)
{
    <Loader LoaderText="@_loaderText" />
}

<QuickGrid @ref="_quickGrid" ItemsProvider="_gridItemsProvider" Pagination="_paginationState" class="table table-bordered table-striped table-hover">
    <PropertyColumn Property="@(b => b.Id)" />

    <TemplateColumn Title="">
        <div class="py-2" style="display:grid;  grid-template-columns: 60px auto;  grid-column-gap:10px: ">
            <img src="@context.Image" style="height:60px;  width:60px;  object-fit:cover;" />
            <div class="ml-2">
                <label class="mb-0 d-block">@context.Title</label>
                @if (context.IsPublished)
                {
                    <a href="/details" target="_blank">
                        @context.Slug
                    </a>
                }
                else
                {
                    <label>@context.Slug</label>
                }
            </div>
        </div>
    </TemplateColumn>

    <PropertyColumn Property="@(b => b.Category.Name)" Title="Category" Class="col-justify-center " />
    <TemplateColumn Title="Featured" Class="col-justify-center ">
        @if (context.IsFeatured)
        {
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => CheckboxHandler(context, CheckboxHandleOptions.IsFeatured))" checked /> Yes
            </label>
        }
        else
        {
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => CheckboxHandler(context, CheckboxHandleOptions.IsFeatured))" /> No
            </label>
        }
    </TemplateColumn>

    <TemplateColumn Title="Published" Class="col-justify-center ">
        @if (context.IsPublished)
        {
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => CheckboxHandler(context, CheckboxHandleOptions.IsPublished))" checked /> Yes
            </label>
        }
        else
        {
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => CheckboxHandler(context, CheckboxHandleOptions.IsPublished))" /> No
            </label>
        }
    </TemplateColumn>

    <TemplateColumn Class="col-justify-center ">
        <a href="admin/manage-blog-posts/edit/@context.Id"
           class="btn btn-sm btn-primary"
           data-enhance-nav="false">
            Edit
        </a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="_paginationState"></Paginator>




<style type="text/css">
    .table > tbody > tr > td {
        vertical-align: middle;
    }
</style>




@code {
    private bool _isLoading;
    private string _loaderText;
    public const int PageSize = 5;
    GridItemsProvider<BlogPost> _gridItemsProvider; //todo use dto with mapper
    private bool _forceReload = true;
    private bool _checkChanged = false;
    private bool _firstRender = false;
    private QuickGrid<BlogPost> _quickGrid = new();
    PaginationState _paginationState = new PaginationState
        {
            ItemsPerPage = PageSize
        };


    protected async override Task OnInitializedAsync()
    {
        Console.ForegroundColor = ConsoleColor.DarkGreen;
        Console.WriteLine("OnInitializedAsync  \n\n");
        _gridItemsProvider = async request =>
        {
            _isLoading = true;
            _loaderText = "Fetching blog posts...";
            StateHasChanged();

            var pagedBlogs = await BlogPostService.GetBlogPosts(request.StartIndex, request.Count ?? PageSize);

            _isLoading = false;
            StateHasChanged();

            return GridItemsProviderResult.From(pagedBlogs.Records, pagedBlogs.TotalCount);
        };
    }

    private async Task CheckboxHandler(BlogPost blogPost, CheckboxHandleOptions checkbox)
    {
        _loaderText = "Saving changes...";
        _isLoading = true;

        if (checkbox == CheckboxHandleOptions.IsFeatured)
            blogPost.IsFeatured = !blogPost.IsFeatured;
        else
            blogPost.IsPublished = !blogPost.IsPublished;

        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var result = await BlogPostService.SaveBlogPost(blogPost, auth.User.GetIdClaim());
        _isLoading = false;

        await _quickGrid.RefreshDataAsync();
    }


    //todo check lifecycle


    private enum CheckboxHandleOptions
    {
        IsPublished,
        IsFeatured
    }
}
